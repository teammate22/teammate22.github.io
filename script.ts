let textBlock = document.getElementById('text-block')
let btn1 = document.getElementById('btn1')
let btn2 = document.getElementById('btn2')
let btn3 = document.getElementById('btn3')
let btn4 = document.getElementById('btn4')
let btn5 = document.getElementById('btn5')
let btn6 = document.getElementById('btn6')
let btn7 = document.getElementById('btn7')
let btn8 = document.getElementById('btn8')
let btn9 = document.getElementById('btn9')
let btn10 = document.getElementById('btn10')
let btn11 = document.getElementById('btn11')
let btn12 = document.getElementById('btn12')
let btn13 = document.getElementById('btn13')
let btn14 = document.getElementById('btn14')
let btn15 = document.getElementById('btn15')
let btn16 = document.getElementById('btn16')
let btn17 = document.getElementById('btn17')
let btn18 = document.getElementById('btn18')
let btn19 = document.getElementById('btn19')
let btn20 = document.getElementById('btn20')
let btn21 = document.getElementById('btn21')
let btn22 = document.getElementById('btn22')

document.addEventListener('DOMContentLoaded', () => {
  // Массив ID всех кнопок
  const btnIds = ['btn1', 'btn2', 'btn3', 'btn4', 'btn5', 'btn6', 'btn7', 'btn8', 'btn9', 'btn10', 'btn11', 'btn12', 'btn13', 'btn14', 'btn15', 'btn16', 'btn17', 'btn18', 'btn19', 'btn20', 'btn21', 'btn22', 'btn23'];

  // Тексты, которые будут отображаться при нажатии на кнопки
  const texts = [
    `<strong>Принципы работы технологий клиент-сервер</strong><br><br>
    <strong>Ключевые концепции</strong><br>
    <strong>1. Клиент-серверная архитектура</strong><br>
    Клиент-серверная архитектура представляет собой модель взаимодействия между компьютерами, где один компьютер (клиент) запрашивает ресурсы или услуги, а другой компьютер (сервер) предоставляет эти ресурсы или услуги. Этот подход позволяет эффективно распределить задачи и обеспечить взаимодействие между различными системами.<br><br>
    <strong>2. Роль клиента и сервера</strong><br>
    Клиент - это устройство или приложение, которое инициирует запрос к серверу для получения данных или услуг. Примерами клиентов могут быть веб-браузеры, мобильные приложения или другие программы.<br>
    Сервер - это устройство или программное обеспечение, которое принимает запросы от клиентов и предоставляет им запрошенные ресурсы или услуги. Серверы могут быть физическими или виртуальными компьютерами, которые хранят и обрабатывают данные.<br><br>
    <strong>Процесс взаимодействия</strong><br>
    <strong>Запрос от клиента:</strong> Взаимодействие начинается с того, что клиент отправляет запрос на сервер. Запрос может содержать различные данные, такие как URL, параметры или данные формы.<br>
    <strong>Обработка запроса на сервере:</strong> После получения запроса сервер выполняет необходимые операции для обработки запроса. Это может включать доступ к базе данных, выполнение вычислений или обработку файлов.<br>
    <strong>Отправка ответа клиенту:</strong> После обработки запроса сервер формирует ответ и отправляет его обратно клиенту. Ответ может содержать запрошенные данные, статус выполнения запроса и другую информацию.<br>
    <strong>Обработка ответа на клиенте:</strong> После получения ответа клиент обрабатывает его и отображает содержимое или выполняет соответствующие действия в зависимости от контекста.<br><br>
    <strong>Преимущества клиент-серверной архитектуры</strong><br>
    <strong>Масштабируемость:</strong> Клиенты и серверы могут быть развернуты и масштабированы независимо друг от друга, что обеспечивает гибкость и масштабируемость системы.<br>
    <strong>Отказоустойчивость:</strong> Распределение функций между клиентом и сервером позволяет уменьшить риск отказа системы и обеспечить непрерывное обслуживание пользователей.<br>
    <strong>Универсальность:</strong> Клиенты и серверы могут быть разработаны с использованием различных технологий и платформ, что позволяет создавать гибкие и универсальные системы.<br><br>
    <strong>Основные понятия</strong><br>
    <strong>Доменное имя:</strong> Доменное имя - это уникальное человеко-читаемое имя, которое используется для идентификации ресурсов в сети Интернет. Оно представляет собой часть веб-адреса, которая позволяет пользователям легко запоминать и обращаться к веб-сайтам. Например, в доменном имени "example.com" "example" является именем, а ".com" - доменным расширением.<br>
    <strong>IP-адрес:</strong> IP-адрес (Internet Protocol address) - это уникальный числовой идентификатор, который присваивается каждому устройству в сети Интернет. Он используется для маршрутизации и доставки данных между устройствами. IP-адрес может быть IPv4 (например, 192.0.2.1) или IPv6 (например, 2001:0db8:85a3:0000:0000:8a2e:0370:7334).<br>
    <strong>DNS (Domain Name System):</strong> DNS (Domain Name System) - это распределенная система, которая переводит доменные имена в IP-адреса и наоборот. Она позволяет пользователям использовать удобные для запоминания доменные имена вместо числовых IP-адресов при обращении к веб-ресурсам. DNS серверы обеспечивают эту функциональность.<br>
    <strong>Интернет-провайдер:</strong> Интернет-провайдер - это компания или организация, которая предоставляет доступ к сети Интернет. Она обеспечивает связь между пользователями и глобальной сетью, предоставляя доступ к Интернету через различные технологии, такие как проводной интернет, беспроводной интернет (Wi-Fi), DSL, кабельное подключение и др.<br>
    <strong>Сервер:</strong> Сервер - это компьютер или программа, которая предоставляет данные или услуги другим компьютерам или программам в сети. В контексте веб-технологий сервер обычно отвечает за обслуживание запросов от клиентских устройств (клиентов) и предоставление им запрошенных данных или услуг.<br>
    <strong>URL (Uniform Resource Locator):</strong> URL (Uniform Resource Locator) - это адрес, который используется для указания расположения ресурса в сети Интернет. Он состоит из нескольких компонентов, включая протокол доступа (например, HTTP или HTTPS), доменное имя, путь к ресурсу и дополнительные параметры. Пример URL: "https://www.example.com/index.html".<br><br>
    <strong>Протоколы</strong><br>
    Протоколы - это наборы правил и соглашений, которые определяют способы взаимодействия между устройствами в сети. Они обеспечивают стандартизацию обмена данными, что позволяет различным устройствам и программам работать вместе.<br><br>
    Протоколы необходимы для:<br>
    <strong>Установления соединения:</strong> Протоколы позволяют устройствам установить соединение между собой, чтобы обмениваться данными.<br>
    <strong>Передачи данных:</strong> Они определяют формат и структуру передаваемых данных, что обеспечивает их правильную передачу и интерпретацию.<br>
    <strong>Обработки ошибок:</strong> Протоколы предусматривают механизмы для обнаружения и исправления ошибок во время передачи данных, чтобы обеспечить их целостность и доставку.<br>
    <strong>Безопасности:</strong> Некоторые протоколы также обеспечивают механизмы для защиты данных от несанкционированного доступа и перехвата.<br><br>
    Давайте рассмотрим подробнее каждый из перечисленных протоколов: HTTP, HTTPS, SSH и FTP.<br>
    <strong>HTTP (Hypertext Transfer Protocol):</strong> HTTP - это протокол передачи гипертекста, который используется для передачи и отображения веб-страниц в сети Интернет. Он определяет формат запросов и ответов между клиентом (например, веб-браузером) и сервером, что позволяет пользователям просматривать веб-страницы, переходить по ссылкам и взаимодействовать с веб-сайтами.<br>
    <strong>HTTPS (Hypertext Transfer Protocol Secure):</strong> HTTPS - это защищенная версия протокола HTTP, которая обеспечивает безопасную передачу данных между клиентом и сервером. Он использует шифрование данных с помощью SSL/TLS протоколов, чтобы защитить конфиденциальность и целостность информации, передаваемой между устройствами. HTTPS часто используется для защиты личной информации пользователей при передаче данных через интернет, таких как пароли, платежные данные и личные сообщения.<br>
    <strong>SSH (Secure Shell):</strong> SSH - это протокол сетевой авторизации и безопасного удаленного доступа, который позволяет пользователям устанавливать защищенное соединение с удаленным компьютером или сервером через нешифрованную сеть. Он обеспечивает шифрование данных и аутентификацию пользователей, что обеспечивает безопасный доступ к удаленным ресурсам и управление удаленными системами.<br>
    <strong>FTP (File Transfer Protocol):</strong> FTP - это протокол передачи файлов, который используется для обмена файлами между компьютерами в сети. Он позволяет пользователям загружать и скачивать файлы с удаленных серверов, обеспечивая простой и эффективный способ обмена данными. Однако FTP не обеспечивает шифрование данных, поэтому он менее безопасен по сравнению с HTTPS или SSH.`,
      
    `<strong>Проектирование и создание веб-сайтов</strong><br>
    <br>
    <strong>Общение с клиентом</strong><br>
    1. <strong>Понимание требований:</strong> Важным этапом при создании веб-сайта является общение с клиентом для выявления его потребностей и целей. Это включает в себя обсуждение функциональности, дизайна, целевой аудитории и прочих важных аспектов.<br>
    <br>
    2. <strong>Уточнение деталей:</strong> В процессе общения с клиентом необходимо уточнить все детали проекта, такие как количество страниц, тип контента, требования к мобильной совместимости и т. д.<br>
    <br>
    <strong>Создание технического задания</strong><br>
    1. <strong>Составление спецификации:</strong> На основе общения с клиентом разрабатывается техническое задание, которое содержит подробное описание всех требований и функциональности веб-сайта.<br>
    <br>
    2. <strong>Определение структуры:</strong> Техническое задание также включает в себя определение структуры веб-сайта, включая список страниц, их содержание и взаимосвязи между ними.<br>
    <br>
    <strong>Создание прототипов дизайна</strong><br>
    1. <strong>Wireframing:</strong> На этом этапе создаются скетчи или wireframes, которые представляют собой простые черновые макеты страниц с распределением элементов и структурой контента.<br>
    <br>
    2. <strong>Прототипирование:</strong> Затем разрабатываются интерактивные прототипы, которые позволяют клиенту оценить пользовательский опыт и функциональность веб-сайта до его финальной реализации.<br>
    <br>
    <strong>Создание дизайна</strong><br>
    1. <strong>Графический дизайн:</strong> На основе прототипов разрабатывается графический дизайн, который включает в себя выбор цветовой схемы, шрифтов, стилей и изображений для создания привлекательного внешнего вида веб-сайта.<br>
    <br>
    2. <strong>UI/UX дизайн:</strong> Важным аспектом является создание удобного и интуитивно понятного пользовательского интерфейса (UI) и пользовательского опыта (UX), который обеспечивает легкость навигации и удовлетворение потребностей пользователей.<br>
    <br>
    <strong>Верстка дизайна</strong><br>
    1. <strong>HTML и CSS:</strong> На этом этапе дизайн преобразуется в код с помощью HTML и CSS. HTML определяет структуру контента, а CSS - его внешний вид и стиль.<br>
    <br>
    2. <strong>Адаптивный дизайн:</strong> Верстка должна быть адаптивной, что обеспечит корректное отображение веб-сайта на различных устройствах и экранах.<br>
    <br>
    <strong>Программирование</strong><br>
    1. <strong>Фронтенд разработка:</strong> На этом этапе добавляется интерактивность и функциональность веб-сайта с помощью JavaScript, что позволяет создать динамические элементы и анимации.<br>
    <br>
    2. <strong>Бекенд разработка:</strong> Бекенд разработка включает в себя создание серверной части веб-сайта, обработку данных, работу с базой данных и другие аспекты, которые обеспечивают его функциональность и работоспособность.<br>
    <br>
    <strong>Наполнение</strong><br>
    1. <strong>Добавление контента:</strong> На этом этапе веб-сайт наполняется контентом, таким как тексты, изображения, видео и другие элементы, которые информируют и привлекают посетителей.`,
      
      `<strong>Структура HTML</strong><br>
      <br>
      <strong>Язык разметки гипертекста HTML</strong><br>
      HTML (HyperText Markup Language) - это язык разметки, используемый для создания и структурирования веб-страниц. Он предоставляет набор элементов (тегов), которые определяют структуру и содержимое страницы, а также указывают браузеру, как отображать этот контент.<br>
      <br>
      <strong>Теги и их атрибуты</strong><br>
      1. <strong>Теги:</strong> Теги HTML представляют собой ключевые элементы языка разметки, которые определяют различные части содержимого страницы. Они обычно имеют открывающий и закрывающий теги, между которыми располагается содержимое элемента. Примеры тегов: <strong>&lt;p&gt;</strong> для параграфов, <strong>&lt;a&gt;</strong> для ссылок, <strong>&lt;img&gt;</strong> для изображений.<br>
      <br>
      2. <strong>Атрибуты:</strong> Атрибуты тегов позволяют задавать дополнительные свойства и параметры элементов. Они указываются внутри открывающего тега и могут содержать значения. Примеры атрибутов: src для указания пути к изображению в теге <strong>&lt;img&gt;</strong>, href для указания адреса ссылки в теге <strong>&lt;a&gt;</strong>.<br>
      <br>
      <strong>Синтаксические отличия HTML4 от XHTML</strong><br>
      HTML4 (HyperText Markup Language 4) и XHTML (eXtensible HyperText Markup Language) - это две различные версии языка разметки HTML. Основные синтаксические отличия между ними заключаются в следующем:<br>
      1. <strong>Синтаксис:</strong> XHTML требует более строгого синтаксиса и корректного размещения тегов, в то время как HTML4 более терпим к некоторым ошибкам и не обязательно требует закрытия всех тегов.<br>
      <br>
      2. <strong>Расширяемость:</strong> XHTML более расширяем, так как он основан на XML (eXtensible Markup Language), что позволяет использовать собственные наборы тегов и определять пользовательские схемы.<br>
      <br>
      3. <strong>Совместимость с XML:</strong> XHTML может быть обработан и интерпретирован как XML, что обеспечивает более строгую проверку синтаксиса и лучшую совместимость с другими XML-приложениями.<br>
      <br>
      <strong>Кодировки страницы и теги &lt;meta&gt;</strong><br>
      1. <strong>Кодировки страницы:</strong> Кодировка страницы определяет способ представления символов и текста на веб-странице. Она указывается с помощью атрибута charset в теге <strong>&lt;meta&gt;</strong>. Например, <strong>&lt;meta charset="UTF-8"&gt;</strong> задает кодировку UTF-8, которая поддерживает множество символов и языков.<br>
      <br>
      2. <strong>Теги &lt;meta&gt;:</strong> Теги <strong>&lt;meta&gt;</strong> используются для предоставления метаданных о веб-странице, таких как описание, ключевые слова, автор и другие. Они также могут содержать информацию о кодировке страницы, типе контента и других аспектах. Например, <strong>&lt;meta name="description" content="Описание страницы"&gt;</strong> указывает описание страницы для поисковых систем.<br>`,
      
      `<strong>Форматирование текста с помощью HTML</strong><br>
      <br>
      <strong>Классификация тегов</strong><br>
      1. <strong>Теги блочного форматирования:</strong> Эти теги используются для определения структуры и организации контента на веб-странице. Они создают блочные элементы, которые занимают всю доступную ширину страницы и начинаются с новой строки. Примеры: <strong>&lt;div&gt;</strong>, <strong>&lt;p&gt;</strong>, <strong>&lt;h1&gt;</strong>-<strong>&lt;h6&gt;</strong>, <strong>&lt;ul&gt;</strong>, <strong>&lt;ol&gt;</strong>, <strong>&lt;li&gt;</strong>.<br>
      <br>
      2. <strong>Теги строчного форматирования:</strong> Эти теги используются для форматирования текста внутри строки. Они не создают новую строку и занимают только столько места, сколько нужно для содержащего их контента. Примеры: <strong>&lt;span&gt;</strong>, <strong>&lt;strong&gt;</strong>, <strong>&lt;em&gt;</strong>, <strong>&lt;a&gt;</strong>, <strong>&lt;img&gt;</strong>, <strong>&lt;br&gt;</strong>, <strong>&lt;input&gt;</strong>.<br>
      <br>
      <strong>Модель форматирования текста</strong><br>
      1. Жирный текст <strong>&lt;strong&gt;</strong> и <strong>&lt;b&gt;</strong>: Используется для выделения текста полужирным шрифтом. <strong>&lt;strong&gt;</strong> обозначает важность текста с точки зрения семантики, в то время как <strong>&lt;b&gt;</strong> просто придает тексту внешний вид жирности.<br>
      <br>
      2. Курсив <strong>&lt;em&gt;</strong> и <strong>&lt;i&gt;</strong>: Используется для выделения текста курсивом. <strong>&lt;em&gt;</strong> обозначает эмфазу (выделение) текста с точки зрения семантики, в то время как <strong>&lt;i&gt;</strong> просто придает тексту внешний вид курсива.<br>
      <br>
      3. Подчеркивание <strong>&lt;u&gt;</strong>: Используется для добавления подчеркивания к тексту.<br>
      <br>
      4. Зачеркивание <strong>&lt;s&gt;</strong>, <strong>&lt;strike&gt;</strong>, <strong>&lt;del&gt;</strong>: Используется для зачеркивания текста.<br>
      <br>
      <strong>Цвета в web</strong><br>
      1. Использование именованных цветов: HTML поддерживает использование предопределенных именованных цветов, таких как "red", "blue", "green" и др. Например, <strong>&lt;font color="red"&gt;Красный текст&lt;/font&gt;</strong>.<br>
      <br>
      2. Использование цветов в формате RGB: Цвета могут быть указаны с помощью значений красного (R), зеленого (G) и синего (B) компонентов. Например, <strong>&lt;font color="#FF0000"&gt;Красный текст&lt;/font&gt;</strong> для красного цвета.<br>
      <br>
      3. Использование цветов в формате RGBA: RGBA добавляет четвертый параметр - альфа-канал, который определяет прозрачность цвета. Например, <strong>&lt;font color="rgba(255, 0, 0, 0.5)"&gt;Полупрозрачный красный текст&lt;/font&gt;</strong>.<br>
      <br>
      4. Использование цветов в формате HEX: Цвета также могут быть указаны в шестнадцатеричной системе счисления. Например, <strong>&lt;font color="#FF0000"&gt;Красный текст&lt;/font&gt;</strong> для красного цвета.<br>`,
      
      `<strong>Форматирование с помощью CSS</strong><br>
      <br>
      <strong>CSS — каскадные таблицы стилей</strong><br>
      CSS (Cascading Style Sheets) - это мощный инструмент для управления внешним видом веб-страниц. Он позволяет определять различные аспекты стилизации, такие как цвет текста, размер шрифта, расположение элементов и многое другое. Каскадность в CSS означает, что стили могут наследоваться и перезаписываться, образуя иерархию стилей.<br>
      <br>
      <strong>Теги без форматирования &lt;div&gt; и &lt;span&gt;</strong><br>
      &lt;div&gt;: Этот тег является блочным элементом и используется для группировки других элементов в блоки. Он позволяет создавать структуру на странице, разделять ее на логические секции и управлять ими с помощью CSS. Например, блоки &lt;div&gt; могут использоваться для создания навигационного меню, боковой панели или футера.<br>
      <br>
      &lt;span&gt;: Этот тег является строчным элементом и обычно используется для выделения части текста или вложенных элементов в строке. Он позволяет применять стили к отдельным словам или фразам без изменения структуры содержимого. Например, &lt;span&gt; можно использовать для изменения цвета или стиля отдельного слова в предложении.<br>
      <br>
      <strong>Сравнение HTML и CSS на примере линейных и блочных тегов</strong><br>
      HTML определяет структуру содержимого страницы, в то время как CSS определяет внешний вид этого содержимого. Например, HTML устанавливает, что текст на странице является абзацем (&lt;p&gt;), а CSS определяет его размер, цвет и шрифт. Линейные теги, такие как &lt;span&gt; и &lt;a&gt;, управляют форматированием содержимого в пределах строки, в то время как блочные теги, такие как &lt;div&gt; и &lt;p&gt;, определяют блочные элементы, занимающие всю доступную ширину страницы.<br>
      <br>
      <strong>Использование атрибутов class и id для задания стилей</strong><br>
      <strong>class:</strong> Атрибут class используется для группировки элементов и применения к ним одних и тех же стилей. Он позволяет повторно использовать стили на нескольких элементах страницы. Например, если у вас есть несколько абзацев, которые должны иметь одинаковый стиль, вы можете применить им класс.<br>
      <br>
      <strong>id:</strong> Атрибут id также используется для идентификации элементов, но он должен быть уникальным на странице. Это позволяет точечно применять стили к конкретным элементам. Например, если у вас есть один уникальный элемент, который должен выглядеть по-особенному, вы можете использовать идентификатор для этого.<br>
      <br>
      <strong>Использование внешних CSS-файлов стилей</strong><br>
      Внешние CSS-файлы позволяют отделить стили от содержимого страницы, что делает код более организованным и легко поддерживаемым. Они обычно содержат все стили для всего сайта и подключаются к HTML-документу с помощью тега <strong>&lt;link&gt;</strong>. Это удобно, так как вы можете легко изменять стили на всем сайте, изменив только один файл стилей.<br>`,

      `<strong>Графика в веб-дизайне</strong><br>
      <br>
      <strong>Оптимизация графики</strong><br>
      Оптимизация графики - это процесс уменьшения размера файлов изображений с сохранением приемлемого качества, что позволяет ускорить загрузку веб-страницы и улучшить пользовательский опыт.<br>
      <br>
      <strong>Форматы графических файлов в интернете</strong><br>
      1. JPEG (Joint Photographic Experts Group): Этот формат хорошо подходит для фотографий и изображений с плавными переходами цветов. Он поддерживает сжатие с потерями, что позволяет снизить размер файла, но при этом может снизиться качество изображения.<br>
      <br>
      2. PNG (Portable Network Graphics): PNG обеспечивает лучшее качество изображения и поддерживает прозрачность. Он часто используется для изображений с прозрачными или полупрозрачными областями.<br>
      <br>
      3. GIF (Graphics Interchange Format): GIF обычно используется для анимированных изображений. Он поддерживает анимацию и прозрачность, но может иметь ограничения по цветам и качеству.<br>
      <br>
      4. SVG (Scalable Vector Graphics): SVG используется для векторной графики и обеспечивает высокое качество изображений при любом масштабе. Он поддерживает анимацию, интерактивность и масштабирование без потери качества.<br>
      <br>
      <strong>Тег &lt;img&gt; и его атрибуты</strong><br>
      Тег &lt;img&gt; используется для вставки изображений на веб-страницу. Он имеет несколько атрибутов для настройки отображения изображения:<br>
      <br>
      1. src: Атрибут src указывает путь к файлу изображения. Например, &lt;img src="image.jpg"&gt;.<br>
      <br>
      2. alt: Атрибут alt задает альтернативный текст, который будет отображен в случае, если изображение не может быть загружено или для пользователей с ограниченными возможностями. Например, &lt;img src="image.jpg" alt="Описание изображения"&gt;.<br>
      <br>
      3. width и height: Атрибуты width и height задают ширину и высоту изображения в пикселях. Например, &lt;img src="image.jpg" width="100" height="100"&gt;.<br>
      <br>
      <strong>Свойство background</strong><br>
      Свойство background в CSS используется для установки фона элемента. Оно может применяться к любому элементу и имеет несколько значений:<br>
      <br>
      1. background-color: Устанавливает цвет фона элемента. Например, background-color: #ffffff; установит белый фон.<br>
      <br>
      2. background-image: Устанавливает изображение в качестве фона элемента. Например, background-image: url('image.jpg'); установит изображение image.jpg в качестве фона.<br>
      <br>
      3. background-repeat: Определяет, как будет повторяться изображение фона, если оно меньше размеров элемента. Например, background-repeat: repeat-x; повторит изображение только по горизонтали.<br>
      <br>
      4. background-position: Задает начальное положение изображения фона. Например, background-position: center; поместит изображение по центру элемента.<br>
      <br>
      5. background-size: Определяет размер изображения фона. Например, background-size: cover; масштабирует изображение так, чтобы оно полностью покрывало элемент.<br>`,

      `<strong>Создание адаптивной верстки</strong><br>
      <strong>Использование @media для адаптивной верстки</strong><br>
      Медиа-запросы @media в CSS используются для применения стилей в зависимости от характеристик устройства, таких как ширина экрана, высота экрана, ориентация и др. Они позволяют создавать адаптивные дизайны, которые могут подстраиваться под разные размеры экранов.<br>
      <br>
      Пример медиа-запроса для устройств с максимальной шириной экрана 768px:<br>
      <strong>@media screen and (max-width: 768px) {<br>
      &nbsp;&nbsp;/* Здесь прописываются стили для устройств с шириной экрана до 768px */<br>
      }</strong><br>
      <br>
      <strong>Примеры реализации</strong><br>
      <strong>1. Адаптивные колонки:</strong> Использование процентных ширин для колонок вместо фиксированных значений позволяет им гибко подстраиваться под размер экрана.<br>
      <br>
      <strong>2. Гибкая типография:</strong> Использование единиц измерения, таких как em или rem, для задания размеров шрифтов и интервалов позволяет тексту масштабироваться в зависимости от размера экрана.<br>
      <br>
      <strong>3. Скрытие/показ элементов:</strong> Использование медиа-запросов для скрытия или показа определенных элементов на мобильных устройствах или планшетах может улучшить пользовательский опыт.<br>
      <br>
      <strong>Использование viewport для правильного отображения сайта на мобильных устройствах</strong><br>
      Viewport - это видимая область веб-страницы на экране устройства. Указание правильного viewport позволяет браузеру правильно масштабировать содержимое страницы на мобильных устройствах и планшетах.<br>
      <br>
      Пример указания viewport в HTML:<br>
      <strong>&lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</strong> Этот мета-тег указывает браузеру использовать ширину устройства как ширину viewport и установить начальный масштаб на 1.0.`,

      `<strong>Структура HTML5 документа</strong><br>
      HTML5 предлагает более семантичную структуру для веб-страниц, что делает код более понятным и легко читаемым для разработчиков и поисковых систем. Основными новыми элементами являются &lt;header&gt;, &lt;nav&gt;, &lt;main&gt;, &lt;article&gt;, &lt;section&gt;, &lt;aside&gt;, &lt;footer&gt;. Эти элементы помогают определить структуру страницы: заголовок, навигацию, основное содержимое, статьи, секции и т. д.<br>
      <br>
      <strong>Новые элементы форм. Плэйсхолдеры</strong><br>
      HTML5 ввел несколько новых элементов форм для улучшения пользовательского опыта, таких как &lt;input type="email"&gt;, &lt;input type="url"&gt;, &lt;input type="tel"&gt;, которые позволяют браузеру проводить базовую валидацию данных на стороне клиента. Кроме того, появился атрибут placeholder, который позволяет размещать подсказки в полях ввода, облегчая пользователям понимание, что от них требуется вводить в это поле.<br>
      <br>
      <strong>Новые свойства CSS3</strong><br>
      CSS3 добавил множество новых свойств для стилизации веб-страниц, включая border-radius для создания скругленных углов, box-shadow для добавления теней, transform для преобразования элементов, transition и animation для создания анимаций, и многое другое. Эти новые возможности позволяют разработчикам создавать более красивые и динамичные веб-сайты без необходимости использования изображений или скриптов.<br>
      <br>
      <strong>Рассмотрение новых API для управления данными на странице</strong><br>
      HTML5 предоставляет множество новых API для работы с данными на веб-странице, включая API для работы с локальным хранилищем (localStorage и sessionStorage), API для работы с файлами (File API), а также новые возможности для работы с геолокацией (Geolocation API) и веб-сокетами (WebSocket API). Эти API обеспечивают более простой и эффективный способ работы с данными на стороне клиента, что делает веб-приложения более мощными и интерактивными.<br>
      <br>
      <strong>Готовность спецификации HTML5 и браузеров к HTML5</strong><br>
      Спецификация HTML5 была окончательно принята в 2014 году, и большинство современных браузеров полностью поддерживают HTML5 и CSS3. Однако некоторые возможности могут быть недоступны в старых версиях браузеров, поэтому важно использовать современные методы разработки и проверять совместимость с различными браузерами.<br>
      <br>
      Это означает, что разработчики могут использовать новые функции HTML5 и CSS3 в своих проектах с уверенностью, что они будут работать на большинстве современных устройств и браузеров.`,

      `<strong>Основы верстки с использованием позиционирования</strong><br>
      Позиционирование элементов в CSS позволяет разработчикам управлять местоположением элементов на странице. В CSS есть несколько значений свойства <strong>position</strong>, которые определяют, как элемент будет позиционироваться относительно своего родительского контейнера или других элементов.<br><br>
      
      <strong>Свойства</strong><br>
      1. <strong>static:</strong> Это значение по умолчанию для позиционирования элементов. Элементы со значением <strong>position: static</strong> располагаются в потоке документа и игнорируют свойства <strong>top, right, bottom, left</strong>.<br><br>
      
      2. <strong>relative:</strong> Элементы со значением <strong>position: relative</strong> позиционируются относительно своего исходного местоположения. При использовании свойств <strong>top, right, bottom, left</strong> они перемещаются относительно своего нормального положения, но при этом оставляют место, которое они занимали в потоке документа.<br><br>
      
      3. <strong>absolute:</strong> Элементы со значением <strong>position: absolute</strong> позиционируются относительно ближайшего позиционированного (не static) родительского элемента. Если такого элемента нет, то элемент позиционируется относительно окна браузера. Элемент с позиционированием absolute удаляется из потока документа, поэтому другие элементы не учитывают его при позиционировании.<br><br>
      
      4. <strong>fixed:</strong> Элементы со значением <strong>position: fixed</strong> позиционируются относительно окна браузера и остаются на месте при прокрутке страницы. Это полезно, когда вы хотите создать элемент, который всегда остается видимым, например, шапка сайта или кнопка "Вверх".<br><br>
      
      Использование этих свойств позволяет создавать различные макеты и компоновки элементов на веб-странице с помощью CSS.`,

      `<strong>Гиперссылки. Принципы навигации веб-сайта</strong><br><br>
      <strong>Абсолютная и относительная адресация</strong><br>
      <strong>Абсолютная адресация:</strong> Это ссылки, которые указывают полный путь к ресурсу, начиная с корневого каталога веб-сервера. Такие ссылки включают в себя протокол (например, http или https), доменное имя и путь к ресурсу. Абсолютные ссылки используются, когда необходимо ссылаться на страницы, расположенные на других веб-сайтах, или на ресурсы, которые всегда должны быть доступны из любого места.<br><br>
      <strong>Относительная адресация:</strong> Это ссылки, которые указывают путь к ресурсу относительно местоположения текущего документа. Они не содержат доменного имени и часто используются для ссылок на страницы и файлы внутри одного веб-сайта. Относительные ссылки облегчают управление структурой сайта, поскольку они остаются корректными при переносе сайта на другой домен или при изменении структуры каталогов.<br><br>
      <strong>Создание меню</strong><br>
      Меню навигации — это один из ключевых элементов веб-сайта, который позволяет пользователям легко перемещаться между различными разделами и страницами. Меню обычно создается с использованием списков и может быть вертикальным или горизонтальным, в зависимости от дизайна сайта. В меню включаются ссылки на важные разделы, такие как "Главная", "О нас", "Услуги", "Контакты". Стилизуется меню с помощью CSS для улучшения визуального восприятия и удобства использования.<br><br>
      <strong>Свойство display</strong><br>
      Свойство display в CSS определяет, как элемент будет отображаться на веб-странице. Оно может принимать различные значения:<br><br>
      <strong>block:</strong> Элемент занимает всю доступную ширину и начинает с новой строки. Примеры: блоки текста, заголовки.<br>
      <strong>inline:</strong> Элемент занимает только необходимую для его содержимого ширину и не начинает с новой строки. Примеры: ссылки, выделения текста.<br>
      <strong>inline-block:</strong> Элемент комбинирует свойства block и inline, занимая только необходимую ширину, но позволяя задавать размеры.<br>
      <strong>flex:</strong> Создает гибкий контейнер для управления макетом с использованием flexbox.<br>
      <strong>grid:</strong> Создает сеточный контейнер для управления макетом с использованием CSS Grid.<br><br>
      <strong>CSS свойство cursor</strong><br>
      Свойство cursor в CSS определяет внешний вид указателя мыши при наведении на элемент. Это свойство используется для улучшения пользовательского интерфейса и предоставляет различные стили курсора:<br><br>
      <strong>default:</strong> Стандартный курсор.<br>
      <strong>pointer:</strong> Курсор в виде руки, указывающий на интерактивность элемента, например, ссылки.<br>
      <strong>text:</strong> Курсор в виде текстового курсора, используемый для текстовых полей и областей.<br>
      <strong>move:</strong> Курсор, указывающий на возможность перемещения элемента.<br><br>
      <strong>Псевдоклассы</strong><br>
      Псевдоклассы в CSS позволяют применять стили к элементам в зависимости от их состояния или положения в документе:<br><br>
      <strong>:hover:</strong> Применяется к элементу, когда пользователь наводит курсор на него.<br>
      <strong>:active:</strong> Применяется к элементу в момент его активации, например, при нажатии на ссылку.<br>
      <strong>:visited:</strong> Применяется к ссылкам, которые уже были посещены пользователем.<br>
      <strong>:nth-child(n):</strong> Применяется к элементам в зависимости от их порядкового номера среди соседних элементов.<br><br>
      <strong>Псевдоэлементы</strong><br>
      Псевдоэлементы в CSS используются для создания виртуальных элементов и применения к ним стилей. Они позволяют вставлять контент или изменять стиль части элемента:<br><br>
      <strong>::before:</strong> Добавляет виртуальный элемент перед содержимым выбранного элемента.<br>
      <strong>::after:</strong> Добавляет виртуальный элемент после содержимого выбранного элемента.<br>
      <strong>::first-line:</strong> Применяет стили к первой строке текста внутри элемента.<br>
      <strong>::first-letter:</strong> Применяет стили к первой букве текста внутри элемента.<br><br>
      Эти свойства и методы помогают создавать более интерактивные, привлекательные и удобные для использования веб-страницы. Понимание принципов адресации, навигации, позиционирования и стилизации элементов позволяет разработчикам эффективно управлять структурой и дизайном веб-сайтов.`,

      `<strong>Списки: Создание. Форматирование.</strong><br><br>
      <strong>Создание списков</strong><br>
      Списки используются для организации информации в упорядоченные или неупорядоченные наборы.<br><br>
      <strong>Неупорядоченные списки:</strong> Создаются с использованием тега &lt;ul&gt;. Каждый элемент списка обычно представлен тегом &lt;li&gt;. Они часто отображаются с маркерами, такими как точки или кружки.<br>
      <strong>Упорядоченные списки:</strong> Создаются с использованием тега &lt;ol&gt;. Каждый элемент списка также представлен тегом &lt;li&gt;. Они обычно отображаются с номерами или буквами, указывающими порядок элементов.<br><br>
      <strong>Форматирование списков</strong><br>
      Списки могут быть отформатированы с помощью CSS для изменения их внешнего вида и расположения. Можно изменить маркеры, нумерацию, отступы, поля, шрифт и цвет текста и т. д.<br><br>
      <strong>Списки определений: элементы &lt;dl&gt;, &lt;dd&gt;, &lt;dt&gt;.</strong><br>
      <strong>Элементы списков определений</strong><br>
      <strong>&lt;dl&gt;:</strong> Определяет список определений (словарь). Содержит один или несколько элементов &lt;dt&gt; (термин) и связанные с ними элементы &lt;dd&gt; (определение).<br>
      <strong>&lt;dt&gt;:</strong> Определяет термин или название.<br>
      <strong>&lt;dd&gt;:</strong> Определяет определение или описание термина.<br><br>
      <strong>Управление отступами и полями</strong><br>
      Отступы и поля вокруг элементов списка можно управлять с помощью CSS. Например, можно использовать свойство margin для добавления отступов между элементами списка и свойство padding для управления отступами внутри элементов списка.<br><br>
      Эти возможности позволяют создавать структурированные и красочные списки, которые лучше подходят для представления информации на веб-страницах.`,

      `<strong>Введение в программирование: Основные понятия</strong><br><br>
      <strong>Язык программирования</strong><br>
      Язык программирования - это формальный набор инструкций, которые используются для написания программ, которые компьютер может выполнить. Языки программирования предоставляют набор синтаксических правил для создания алгоритмов и структур данных.<br><br>
      <strong>Типы языков программирования</strong><br>
      Существует множество различных типов языков программирования, включая:<br>
      - <strong>Высокоуровневые языки:</strong> Предназначены для удобства программистов и обычно ближе к естественному языку человека. Примеры: Python, JavaScript, Java.<br>
      - <strong>Низкоуровневые языки:</strong> Предназначены для написания кода, который ближе к машинному языку. Примеры: Ассемблер, C.<br>
      - <strong>Интерпретируемые языки:</strong> Код выполняется интерпретатором построчно. Примеры: Python, Ruby, JavaScript.<br>
      - <strong>Компилируемые языки:</strong> Код сначала компилируется в машинный код, который потом выполняется компьютером. Примеры: C, C++, Rust.<br><br>
      <strong>Интерпретатор</strong><br>
      Интерпретатор - это программа, которая считывает и выполняет исходный код на определенном языке программирования. Для интерпретируемых языков, таких как Python или JavaScript, интерпретатор работает непосредственно с исходным кодом.<br><br>
      <strong>Алгоритм</strong><br>
      Алгоритм - это последовательность инструкций или операций, предназначенных для выполнения определенной задачи или решения определенной проблемы.<br><br>
      <strong>Что такое JavaScript</strong><br>
      JavaScript - это высокоуровневый, интерпретируемый язык программирования, который обычно используется для добавления интерактивности на веб-страницы. Он позволяет создавать динамические элементы, обрабатывать события и взаимодействовать с пользователем.<br><br>
      <strong>Синтаксис ECMAScript</strong><br>
      ECMAScript - это стандарт, который определяет синтаксис и основные функции JavaScript. Версии ECMAScript обычно обозначаются числом (например, ECMAScript 6 или ES6), и новые функции и возможности часто добавляются в каждой последующей версии стандарта.<br><br>
      <strong>Внедрение JavaScript в HTML-код</strong><br>
      JavaScript может быть внедрен в HTML-код с помощью тега &lt;script&gt;. Он может быть помещен внутрь тега <head> для выполнения при загрузке страницы или внутрь тега <body>, чтобы выполняться во время загрузки или после нее.<br><br>
      <strong>Комментарии. Переменные. Операторы.</strong><br>
      <strong>Комментарии:</strong> В JavaScript комментарии используются для добавления пояснений к коду и не влияют на его выполнение. Однострочные комментарии начинаются с //, а многострочные комментарии обрамляются /* и */.<br>
      <strong>Переменные:</strong> Переменные в JavaScript используются для хранения данных. Они объявляются с помощью ключевого слова let, const или var.<br>
      <strong>Операторы:</strong> JavaScript поддерживает множество операторов для выполнения различных операций, включая арифметические, строковые, побитовые, логические и др. операторы.<br><br>
      <strong>Приоритеты операторов</strong><br>
      Операторы в JavaScript имеют приоритет выполнения. Например, арифметические операторы имеют более высокий приоритет, чем логические операторы. При необходимости порядок выполнения операций можно изменить с помощью скобок.<br><br>
      <strong>Преобразование типов данных</strong><br>
      В JavaScript происходит автоматическое и явное преобразование типов данных. Автоматическое преобразование типов происходит, когда операторы ожидают значения определенного типа, а они представлены другим типом данных. Явное преобразование типов выполняется с помощью функций parseInt(), parseFloat(), String(), Number() и других.<br><br>
      Эти концепции составляют основы программирования на JavaScript и позволяют разработчикам создавать интерактивные веб-приложения и добавлять динамический контент.`,

      `<strong>Условный оператор if .. else</strong><br>
      Условный оператор if .. else в JavaScript позволяет выполнять различные блоки кода в зависимости от выполнения условия.<br><br>
      Пример использования:<br>
      Если x больше 5, выводится сообщение "x больше 5", в противном случае выводится сообщение "x меньше или равно 5".<br><br>
      <strong>Вложенный условный оператор</strong><br>
      В JavaScript можно вкладывать условные операторы один в другой, создавая так называемые вложенные условия.<br><br>
      Пример использования вложенного условного оператора:<br>
      Если x больше 5 и y больше 2, выводится сообщение "x больше 5 и y больше 2", иначе выводится другое сообщение.<br><br>
      <strong>Оператор выбора switch</strong><br>
      Оператор выбора switch в JavaScript позволяет выполнять различные действия в зависимости от значения выражения.<br><br>
      Пример использования оператора switch:<br>
      В зависимости от значения переменной color выводится сообщение о цвете.<br><br>
      <strong>Понятие блок-схемы алгоритма</strong><br>
      Блок-схема алгоритма - это графическое представление последовательности действий для выполнения определенной задачи. Она состоит из блоков, представляющих операции или действия, и стрелок, указывающих направление выполнения этих операций.<br><br>
      Блок-схемы помогают визуализировать и понять алгоритмы, что облегчает их анализ, отладку и документирование.`,

      `<strong>Понятие цикла:</strong><br>
      Цикл в программировании - это конструкция, которая позволяет выполнять определенный блок кода несколько раз до выполнения определенного условия.<br><br>
      <strong>Необходимость использования циклов:</strong><br>
      Циклы используются для повторения одного и того же фрагмента кода несколько раз без необходимости дублирования кода. Они позволяют уменьшить объем кода, сделать его более читаемым и облегчить его поддержку и изменение.<br><br>
      <strong>Циклы while, do ... while, for:</strong><br>
      Цикл while: Выполняет блок кода, пока условие истинно.<br>
      Цикл do ... while: Выполняет блок кода, затем проверяет условие и продолжает выполнение, пока условие истинно.<br>
      Цикл for: Используется для выполнения блока кода заданное количество раз. Включает в себя инициализацию переменных, условие продолжения выполнения и инструкцию обновления переменных.<br><br>
      <strong>Операторы break и continue:</strong><br>
      Оператор break: Прерывает выполнение цикла, когда он достигается. Используется для выхода из цикла, если выполнение дальнейших итераций не требуется.<br>
      Оператор continue: Прерывает текущую итерацию цикла и продолжает выполнение со следующей итерации. Используется, чтобы пропустить часть кода внутри цикла и перейти к следующей итерации.`,

      `<strong>Массивы как тип хранения информации</strong><br>
      Массивы - это структуры данных, которые могут содержать набор элементов одного типа, расположенных в определенной последовательности. Они являются одним из наиболее распространенных типов хранения информации в программировании.<br><br>
      <strong>Стандартные задачи на массивы</strong><br>
      Поиск элемента: Найти определенный элемент в массиве по значению или индексу.<br>
      Добавление элемента: Добавить новый элемент в конец массива или на определенную позицию.<br>
      Удаление элемента: Удалить элемент из массива по значению или индексу.<br>
      Сортировка массива: Отсортировать элементы массива по возрастанию или убыванию.<br>
      Обход массива: Перебрать все элементы массива и выполнить над ними определенные операции.<br>
      Объединение массивов: Объединить несколько массивов в один или добавить элементы одного массива в другой.<br><br>
      <strong>Алгоритм сортировки</strong><br>
      Алгоритм сортировки - это метод упорядочивания элементов набора данных в определенном порядке. Существует множество различных алгоритмов сортировки, таких как сортировка пузырьком, сортировка выбором, сортировка вставками, быстрая сортировка и т. д.<br>
      <strong>Пример быстрой сортировки:</strong><br>
      
      Выбирается опорный элемент из массива.<br>
      Остальные элементы массива разделяются на две группы: элементы, меньшие опорного, и элементы, большие опорного.<br>
      Рекурсивно применяется алгоритм к каждой из групп.<br>
      Результаты объединяются в один массив.<br><br>
      <strong>Понятие двумерных и многомерных массивов</strong><br>
      <strong>Двумерные массивы:</strong> Это массивы, в которых каждый элемент является массивом. Они представляют собой таблицу или сетку данных, где каждый элемент имеет два индекса: один для строки и один для столбца. <br>
      <strong>Многомерные массивы:</strong> Это массивы, в которых каждый элемент может быть массивом любой размерности. Они используются для представления более сложных структур данных, таких как матрицы или кубы.<br><br>
      Массивы предоставляют удобный способ хранения и организации данных в программировании, и умение работать с ними является важным навыком для разработчиков.`,

      `<strong>Введение в клиентский JavaScript</strong><br>
      JavaScript - это язык программирования, который обеспечивает интерактивность веб-страницам. Он выполняется в браузере клиента и позволяет взаимодействовать с элементами веб-страницы, изменять их содержимое, стили и поведение.<br><br>
      <strong>Совместимость в клиентском JavaScript</strong><br>
      Совместимость в клиентском JavaScript означает, что код JavaScript должен работать корректно в различных браузерах без ошибок или несоответствий. Для обеспечения совместимости необходимо учитывать особенности каждого браузера и использовать современные стандарты и практики разработки.<br><br>
      <strong>Кроссбраузерность</strong><br>
      Кроссбраузерность означает, что веб-страница или веб-приложение должны работать одинаково хорошо в различных браузерах, таких как Google Chrome, Mozilla Firefox, Safari, Microsoft Edge и других. Для обеспечения кроссбраузерности следует тестировать код JavaScript в различных браузерах и учитывать их особенности при разработке.<br><br>
      <strong>DOM — структура документа</strong><br>
      DOM (Document Object Model) представляет собой иерархическую структуру документа HTML или XML, которая создается браузером при загрузке веб-страницы. Он представляет каждый элемент веб-страницы как объект, который можно изменять и манипулировать с помощью JavaScript.<br><br>
      <strong>Глобальные элементы в дереве DOM</strong><br>
      Глобальные элементы в дереве DOM - это элементы, которые доступны непосредственно через глобальный объект document. Это, например, document.body, document.head и document.documentElement, которые представляют тело, заголовок и корневой элемент документа соответственно.<br><br>
      <strong>Поиск элементов в дереве DOM</strong><br>
      JavaScript предоставляет несколько методов для поиска элементов в дереве DOM, таких как getElementById, getElementsByClassName, getElementsByTagName, querySelector и querySelectorAll. Эти методы позволяют находить элементы по их идентификатору, классу, тегу или селектору CSS.<br><br>
      <strong>Навигация по документу</strong><br>
      Для навигации по документу можно использовать свойства и методы элементов DOM, такие как parentNode, childNodes, firstChild, lastChild, previousSibling, nextSibling и другие. Они позволяют перемещаться по различным элементам и их отношениям в дереве DOM.<br><br>
      <strong>Манипуляции с узлами: создание, удаление и перемещение</strong><br>
      JavaScript также позволяет создавать, удалять и перемещать узлы в дереве DOM. Для этого используются методы createElement, createTextNode, appendChild, insertBefore, removeChild и другие. Эти методы позволяют динамически изменять содержимое и структуру веб-страницы в зависимости от действий пользователя или других событий.`,

      `<strong>События в JavaScript</strong><br>
      События в JavaScript - это сигналы от браузера, которые указывают на то, что что-то произошло на веб-странице. Эти события могут быть вызваны различными действиями пользователей, такими как клики мыши, нажатия клавиш, отправка формы, загрузка страницы и другие.<br><br>
      <strong>Обработчики событий: Запись кода JavaScript</strong><br>
      Обработчики событий - это функции JavaScript, которые вызываются при возникновении определенного события. Они могут быть привязаны к элементам DOM и реагировать на различные действия пользователей.<br><br>
      <strong>События мыши и клавиатуры</strong><br>
      События мыши и клавиатуры включают в себя такие события, как клики мыши, движения мыши, нажатия клавиш, отпускание клавиш и другие. Они позволяют обрабатывать действия пользователя с помощью JavaScript и реагировать на них соответствующим образом.<br><br>
      <strong>События форм</strong><br>
      События форм включают в себя события, связанные с отправкой формы, вводом данных в поля формы, фокусировкой и снятием фокуса с элементов формы и другие. Они позволяют контролировать процесс отправки и обработки данных формы с помощью JavaScript.<br><br>
      <strong>События загрузки load</strong><br>
      Событие загрузки load срабатывает, когда веб-страница или ресурс были полностью загружены браузером. Оно позволяет выполнить определенные действия после того, как все элементы страницы были загружены и доступны для взаимодействия с пользователем.<br><br>
      <strong>Краткий обзор объекта event</strong><br>
      Объект event представляет собой событие, которое произошло на веб-странице, и содержит информацию о нем, такую как тип события, цель события, координаты курсора мыши и другие. Он используется в обработчиках событий для доступа к информации о событии и его свойствах.<br><br>
      <strong>Всплывающие, стандартные события</strong><br>
      Некоторые события могут всплывать вверх по иерархии DOM, когда они не обработаны непосредственно целевым элементом. Это позволяет им влиять на родительские элементы. Стандартные события - это события, которые поддерживаются всеми современными браузерами и предоставляются стандартом W3C. Они обычно относятся к общим действиям пользователя, таким как клики мыши, отправка формы и нажатия клавиш.`,

      `<strong>Конструкторы объектов</strong><br>
      В JavaScript конструкторы объектов - это функции, которые используются для создания новых экземпляров объектов с определенными свойствами и методами. Они обычно определяются как функции, имя которых начинается с большой буквы, чтобы отличать их от обычных функций. Конструкторы объектов используются в паре с оператором new, который создает новый объект на основе конструктора.<br><br>
      <strong>Массивы и строки как объекты</strong><br>
      В JavaScript массивы и строки также являются объектами. Это означает, что они могут иметь свойства и методы, характерные для объектов. Например, у массивов есть свойства, такие как length, и методы, такие как push и pop. Строки также имеют свойства и методы, такие как length и toUpperCase.<br><br>
      <strong>Прототипы</strong><br>
      Прототипы в JavaScript используются для наследования свойств и методов от других объектов. Каждый объект имеет ссылку на свой прототип, который определяет его наследуемые свойства и методы. Использование прототипов позволяет экономить память, так как общие свойства и методы могут быть разделяемыми между объектами. Примером использования прототипов является наследование методов массивов и строк от их прототипов, что позволяет им использовать общие методы без необходимости повторного определения их для каждого экземпляра.`,

      `<strong>Поиск по селекторам, фильтрация и обход элементов</strong><br><br>
      <strong>Введение и общая информация</strong><br>
      В веб-разработке часто требуется взаимодействие с элементами веб-страницы, такими как изменение их содержимого, стилей или обработка событий. Для этого необходимо уметь находить нужные элементы на странице, фильтровать их по различным критериям и выполнять операции над ними.<br><br>
      <strong>Селекторы</strong><br>
      Селекторы в CSS и JavaScript - это строки, которые определяют набор элементов на веб-странице. Они используются для указания на элементы, которые должны быть выбраны и затем изменены или обработаны. Селекторы могут быть различными, от простых селекторов по тегу или классу до более сложных, использующих комбинированные условия.<br><br>
      <strong>Фильтрация и обход элементов</strong><br>
      После того как элементы были выбраны с помощью селекторов, может возникнуть необходимость фильтровать их или выполнять обход для выполнения определенных операций. Например, вы можете хотеть выбрать все элементы определенного класса и затем изменить их стили или добавить обработчики событий.<br><br>
      JavaScript предоставляет различные методы для поиска, фильтрации и обхода элементов DOM. Некоторые из них включают querySelector, querySelectorAll, getElementsByTagName, getElementsByClassName и многие другие. Эти методы позволяют находить элементы на странице и выполнять различные операции с ними.`,

      `<strong>Глобальный объект Window</strong><br><br>
      <strong>Объект Window</strong> представляет собой глобальное окно в браузере и является корневым объектом для всех объектов JavaScript в окне браузера. Он предоставляет доступ ко всем элементам и функциональности окна браузера, таким как документ, история просмотра, параметры URL и многое другое.<br><br>
      <strong>Методы alert, confirm, prompt</strong><br>
      Метод <strong>alert(message)</strong> выводит диалоговое окно с сообщением <em>message</em> и кнопкой "ОК".<br>
      Метод <strong>confirm(message)</strong> выводит диалоговое окно с сообщением <em>message</em>, кнопками "OK" и "Отмена" и возвращает <em>true</em>, если пользователь нажал "OK", и <em>false</em> в противном случае.<br>
      Метод <strong>prompt(message, default)</strong> выводит диалоговое окно с сообщением <em>message</em>, полем ввода и кнопками "OK" и "Отмена". Он возвращает введенное пользователем значение или <em>null</em>, если пользователь нажал "Отмена".<br><br>
      <strong>Методы setInterval, setTimeout, clearInterval, clearTimeout</strong><br>
      Методы <strong>setInterval(func, delay)</strong> и <strong>setTimeout(func, delay)</strong> используются для запуска функции <em>func</em> через определенное время <em>delay</em> (в миллисекундах). <strong>setInterval</strong> запускает функцию периодически каждые <em>delay</em> миллисекунд, а <strong>setTimeout</strong> запускает функцию один раз через <em>delay</em> миллисекунд.<br>
      Методы <strong>clearInterval(id)</strong> и <strong>clearTimeout(id)</strong> используются для отмены запуска функции, установленной ранее с помощью <strong>setInterval</strong> или <strong>setTimeout</strong>. <em>id</em> - это идентификатор таймера, возвращаемый методами <strong>setInterval</strong> или <strong>setTimeout</strong>.<br><br>
      <strong>Объекты location, history, navigator</strong><br>
      Объект <strong>location</strong> содержит информацию о текущем URL-адресе и позволяет управлять адресной строкой браузера.<br>
      Объект <strong>history</strong> содержит информацию о посещенных страницах в окне браузера и позволяет навигироваться по истории просмотра.<br>
      Объект <strong>navigator</strong> содержит информацию о браузере пользователя, такую как его имя, версия и поддерживаемые функции.<br><br>
      <strong>Работа с cookie</strong><br>
      <strong>Cookie</strong> - это небольшие текстовые файлы, которые веб-сайты отправляют и хранят на компьютере пользователя через браузер. Они используются для хранения информации о сеансе пользователя, такой как логин, предпочтения и состояние сеанса. В JavaScript <strong>cookie</strong> можно создавать, читать и удалять с помощью объекта <strong>document.cookie</strong>. Он представляет собой строку, содержащую все доступные cookie для текущего домена.`,

      `<strong>События</strong><br>
      Методы для работы с событиями:<br>
      <strong>on()</strong> - привязывает обработчик события к выбранным элементам или элементам, соответствующим селектору.<br>
      <strong>off()</strong> - удаляет обработчик события, привязанный с помощью метода on().<br>
      <strong>trigger()</strong> - инициирует событие на выбранных элементах.<br><br>
      Методы делегирования событий:<br>
      <strong>delegate()</strong> - привязывает обработчик события к родительскому элементу, который делегирует обработку событий дочерним элементам, соответствующим селектору.<br>
      <strong>undelegate()</strong> - удаляет делегированный обработчик события.<br><br>
      <strong>Эффекты и анимация</strong><br>
      Методы для работы с эффектами:<br>
      <strong>hide()</strong> - скрывает выбранные элементы.<br>
      <strong>show()</strong> - показывает скрытые элементы.<br>
      <strong>toggle()</strong> - переключает видимость элементов.<br>
      <strong>fadeIn()</strong> - плавно увеличивает прозрачность элементов.<br>
      <strong>fadeOut()</strong> - плавно уменьшает прозрачность элементов до скрытия.<br>
      <strong>fadeTo()</strong> - плавно изменяет прозрачность элементов до указанного значения.<br>
      <strong>fadeToggle()</strong> - переключает прозрачность элементов.<br>
      <strong>slideDown()</strong> - плавно отображает элемент, раскрывая его по вертикали.<br>
      <strong>slideUp()</strong> - плавно скрывает элемент, сворачивая его по вертикали.<br>
      <strong>slideToggle()</strong> - переключает видимость элементов, анимируя их раскрытие или сворачивание.<br><br>
      Дополнительные методы для работы с анимацией:<br>
      <strong>animate()</strong> - запускает пользовательскую анимацию для выбранных элементов.<br>
      <strong>clearQueue()</strong> - удаляет все ожидающие анимации из очереди элементов.<br>
      <strong>delay()</strong> - задерживает запуск следующей анимации в очереди.<br>
      <strong>dequeue()</strong> - запускает следующую анимацию для выбранных элементов в очереди.<br>
      <strong>finish()</strong> - завершает текущую анимацию немедленно.<br>
      <strong>queue()</strong> - определяет новую очередь анимаций для выбранных элементов.<br>
      <strong>stop()</strong> - останавливает текущую анимацию для выбранных элементов.`,

      `<strong>Функции</strong><br>
      <strong>Аргументы функций</strong><br>
      Функции в JavaScript могут принимать аргументы, которые передаются внутрь функции при ее вызове. Аргументы представляют собой значения, передаваемые в функцию для выполнения определенных операций или вычислений внутри нее.<br>
      <strong>Возвращаемые значения</strong><br>
      Функции могут возвращать значения с помощью оператора return. Это позволяет функции выполнить операции и передать результат своей работы обратно в вызывающую часть программы.<br>
      <strong>Функция как переменная</strong><br>
      В JavaScript функции являются объектами первого класса, что означает, что их можно присваивать переменным, передавать в качестве аргументов другим функциям, возвращать из других функций и так далее. Это позволяет использовать функции как данные и обрабатывать их как любые другие объекты.<br>
      <strong>Анонимные функции</strong><br>
      Анонимные функции - это функции без имени, которые могут быть определены непосредственно в месте их использования. Они обычно используются там, где не требуется ссылка на функцию или где нужно определить функцию как аргумент для другой функции.<br>
      <strong>Рекурсия</strong><br>
      Рекурсия - это процесс, при котором функция вызывает саму себя внутри своего тела. Это может быть полезным для решения определенных задач, таких как вычисление факториала или обход древовидной структуры данных. Однако при использовании рекурсии необходимо учитывать возможность бесконечной рекурсии, что может привести к переполнению стека вызовов.`
  ];

  // Функция для изменения текста в блоке "text-block"
  const changeText = (index: number) => {
      const textBlock = document.getElementById('text-block');
      if (textBlock) {
          textBlock.innerHTML = texts[index];
      } else {
          console.error('Element with ID "text-block" not found.');
      }
  };

  // Добавляем обработчики событий для всех кнопок
  btnIds.forEach((btnId, index) => {
      const btn = document.getElementById(btnId);
      if (btn) {
          btn.addEventListener('click', () => changeText(index));
      } else {
          console.error(`Element with ID "${btnId}" not found.`);
      }
  });
});